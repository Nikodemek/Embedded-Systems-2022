/******************************************************************************
 *
 * Copyright:
 *    (C) 2000 - 2005 Embedded Artists AB
 *
 * Description:
 *
 * ESIC:
 *    pre_emptive_os
 *
 * Version:
 *    1.4.0
 *
 * Generate date:
 *    2005-03-15 at 20:27:15
 *
 * NOTE:
 *    DO NOT EDIT THIS FILE. IT IS AUTO GENERATED.
 *    CHANGES TO THIS FILE WILL BE LOST IF THE FILE IS RE-GENERATED
 *
 * Signature:
 *   7072655F656D70746976655F6F73,312E342E302E30,020235
 *   ,35,10104021013134373435363030,07323838,3732,01013
 *   830,0101013138303030303030,3135,33,3135,0232323530
 *   ,01020130,0231343734353539,3238313831,020101100302
 *   103030310010133,0163130,3230,3330,3430,3530,3630,3
 *   730,3830,3930,313030,313130,313230,313330,313430,3
 *   13530,313630,,35,35,35,35,35,35,35,35,35,35,35,35,
 *   35,35,35,35,,,,1001001100011000000000]484152445741
 *   5245,4C5043323130365F32,545538,756E7369676E6564206
 *   3686172,414C49474E4D454E54,34,54424F4F4C,756E73696
 *   76E65642063686172,54553332,756E7369676E656420696E7
 *   4,544D505F46494C4553,2A2E656C663B2A2E6C73743B2A2E6
 *   D61703B2A2E6F3B2A2E6F626A3B2A2E64,454E4449414E,4C4
 *   954544C45,54533332,7369676E656420696E74,545338,736
 *   9676E65642063686172,54553136,756E7369676E656420736
 *   86F7274,54533136,7369676E65642073686F7274,44455343
 *   52495054494F4E,,44454255475F4C4556454C,30,434F4445
 *   5F524F4F54,,47454E5F52554C4553,,4C494E455F5445524D
 *   ,43524C46,4252414345,,43524541544F52,416E646572732
 *   0526F7376616C6C,4352454154494F4E5F44415445,3230303
 *   52D30332D31352032303A31373A3432,524F4F54,433A2F446
 *   F63756D656E747320616E642053657474696E67732F416E646
 *   5727320526F7376616C6C2F4D696E6120646F6B756D656E742
 *   F456D62656464656420417274697374732F50726F647563747
 *   32F4C50433231303620525332333220517569636B537461727
 *   420426F6172642F72746F732F]505245464958,,4445425547
 *   5F4C4556454C,30,555345525F434F4D4D454E54,]64656661
 *   756C74,
 *
 * Checksum:
 *    254363
 *
 *****************************************************************************/

#ifndef _COUNT_SEM__h
#define _COUNT_SEM__h
/******************************************************************************
 * Includes
 *****************************************************************************/

#include "event.h"

/******************************************************************************
 * Defines, macros, and typedefs
 *****************************************************************************/

typedef struct _tCntSem_
{
  tOSEvent ev;
  tU16 cnt;

}tCntSem;
#ifndef _OSAPI__h
/******************************************************************************
 * Public functions
 *****************************************************************************/


/*****************************************************************************
 *
 * Description:
 *    This function initializes a counting semaphore and must be called before 
 *    any other function is used on the semaphore. 
 *
 * Params:
 *    [in] pSem    - A pointer to an allocated counting semaphore structure. 
 *    [in] initial - The initial counter value. 
 *
 ****************************************************************************/
void osSemInit(tCntSem* pSem,
               tU16     initial);


/*****************************************************************************
 *
 * Description:
 *    This function takes a counting semaphore, i.e. decreasing the semaphore 
 *    counting. If the semaphore counter is zero the function will block until 
 *    another process or an ISR gives the semaphore or a timeout occurs. 
 *
 * Params:
 *    [in]  pSem    - A pointer to an initialized semaphore structure. 
 *    [in]  timeout - After timeout ticks the operation will timeout. A 
 *                    timeout of zero means no timeout at all. 
 *    [out] pError  - The return status of the function. 
 *
 * Returns:
 *    TRUE if semaphore was taken and FALSE if timeout or error. 
 *
 * Error codes:
 *    OS_OK         - The function completed successfully. 
 *    OS_ERROR_ISR  - The function was called from an interrupt service 
 *                    routine. 
 *    OS_ERROR_NULL - A NULL pointer was supplied to the function where it was 
 *                    not allowed. 
 *
 ****************************************************************************/
tBool osSemTake(tCntSem* pSem,
                tU32     timeout,
                tU8*     pError);


/*****************************************************************************
 *
 * Description:
 *    This function gives a counting semaphore, i.e. increases the semaphore 
 *    counter. If there are one or more processes waiting for the semaphore 
 *    the process with highest priority is made ready to run. 
 *
 * Params:
 *    [in]  pSem   - A pointer to an initialized semaphore structure. 
 *    [out] pError - The return status of the function. 
 *
 * Error codes:
 *    OS_OK         - The function completed successfully. 
 *    OS_ERROR_NULL - A NULL pointer was supplied to the function where it was 
 *                    not allowed. 
 *
 ****************************************************************************/
void osSemGive(tCntSem* pSem,
               tU8*     pError);


/*****************************************************************************
 *
 * Description:
 *    This function tries to take a counting semaphore. If the semaphore 
 *    cannot be taken the function immediately returns instead of blocking. 
 *    This function can be used from an ISR (interrupt service routine). 
 *
 * Params:
 *    [in]  pSem   - A pointer to an initialized semaphore structure. 
 *    [out] pError - The return status of the function. 
 *
 * Returns:
 *    0 if the semaphore was taken, else 1. 
 *
 * Error codes:
 *    OS_OK         - The function completed successfully. 
 *    OS_ERROR_NULL - A NULL pointer was supplied to the function where it was 
 *                    not allowed. 
 *
 ****************************************************************************/
tU8 osSemTryTake(tCntSem* pSem,
                 tU8*     pError);

#endif
#endif
